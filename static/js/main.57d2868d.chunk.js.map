{"version":3,"sources":["notes/do.wav","notes/re.wav","notes/mi.wav","notes/fa.wav","notes/sol.wav","notes/la.wav","notes/si.wav","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","estaSonando","setEstaSonando","misNotas","setMisNotas","notas","nombre","link","require","tieneSostenido","className","join","map","nota","onClick","Audio","play","setTimeout","console","log","concat","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oLAAAA,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,4FCgF5BC,MA7Ef,WAAgB,IAAD,EAEyBC,mBAAS,IAFlC,mBAENC,EAFM,KAEOC,EAFP,OAGmBF,mBAAS,IAH5B,mBAGNG,EAHM,KAGIC,EAHJ,KAIPC,EAAM,CACV,CACEC,OAAQ,KACRC,KAAMC,EAAQ,IACdC,gBAAgB,GAElB,CACEH,OAAQ,KACRC,KAAMC,EAAQ,IACdC,gBAAgB,GAElB,CACEH,OAAQ,KACRC,KAAMC,EAAQ,KAEhB,CACEF,OAAQ,KACRC,KAAMC,EAAQ,IACdC,gBAAgB,GAElB,CACEH,OAAQ,MACRC,KAAMC,EAAQ,IACdC,gBAAgB,GAElB,CACEH,OAAQ,KACRC,KAAMC,EAAQ,IACdC,gBAAgB,GAElB,CACEH,OAAQ,KACRC,KAAMC,EAAQ,MAclB,OACE,yBAAKE,UAAW,OAChB,yBAAKA,UAAW,UAChB,8CACA,qCAAOP,EAASQ,KAAK,OACpB,yBAAKD,UAAU,cAEhBL,EAAMO,KAAI,SAAAC,GACV,OACE,yBACAH,UAAS,eAAUT,IAAgBY,EAAKP,QAAU,eAAiBQ,QAAS,kBArB5D,SAACD,GACnBX,EAAeW,EAAKP,QACL,IAAIS,MAAMF,EAAKN,MACvBS,OACPC,YAAW,WACTf,EAAe,MACd,KACJgB,QAAQC,IAAIN,EAAKP,QACjBF,GAAY,SAAAD,GAAQ,OAAIA,EAASiB,OAAOP,EAAKP,WAasCe,CAAYR,KAIlG,0BAAMH,UAAS,UAAKT,IAAgBY,EAAKP,QAAU,OAApC,MAAgDO,EAAKP,QAG3DO,EAAKJ,gBAAkB,yBAAKC,UAAY,kBC1D7BY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.57d2868d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/do.18fd3f6f.wav\";","module.exports = __webpack_public_path__ + \"static/media/re.217b943a.wav\";","module.exports = __webpack_public_path__ + \"static/media/mi.1f26c778.wav\";","module.exports = __webpack_public_path__ + \"static/media/fa.a787534a.wav\";","module.exports = __webpack_public_path__ + \"static/media/sol.785a33d2.wav\";","module.exports = __webpack_public_path__ + \"static/media/la.10af03f3.wav\";","module.exports = __webpack_public_path__ + \"static/media/si.70924435.wav\";","import React,{useState} from 'react';\n import './App.css';\n\nfunction App() {\n\n  const [estaSonando, setEstaSonando] = useState(\"\"); \n  const [misNotas, setMisNotas] = useState([ ]);\n  const notas=[\n    {\n      nombre: \"Do\",\n      link: require(\"./notes/do.wav\"),\n      tieneSostenido: true\n    },\n    {\n      nombre: \"Re\",\n      link: require(\"./notes/re.wav\"),\n      tieneSostenido: true\n    },\n    {\n      nombre: \"Mi\",\n      link: require(\"./notes/mi.wav\")\n    },\n    {\n      nombre: \"Fa\",\n      link: require(\"./notes/fa.wav\"),\n      tieneSostenido: true\n    },\n    {\n      nombre: \"Sol\",\n      link: require(\"./notes/sol.wav\"),\n      tieneSostenido: true\n    },\n    {\n      nombre: \"La\",\n      link: require(\"./notes/la.wav\"),\n      tieneSostenido: true\n    },\n    {\n      nombre: \"Si\",\n      link: require(\"./notes/si.wav\") \n    }\n  ]\n  const handleClick = (nota)=>{ \n    setEstaSonando(nota.nombre);\n    const sonido = new Audio(nota.link);\n    sonido.play();\n    setTimeout(() => {\n      setEstaSonando(\"\")\n    }, 300) \n   console.log(nota.nombre) \n   setMisNotas(misNotas => misNotas.concat(nota.nombre))  \n  } \n  \n  return (\n    <div className =\"App\">\n    <div className =\"Titulo\">\n    <h1>Piano en React</h1>  \n    <p>{`${misNotas.join(\" \")}`}</p>\n     <div className=\"contenedor\">\n  {\n    notas.map(nota =>{\n    return(\n      <div \n      className={`nota ${estaSonando === nota.nombre && 'estaSonando'}`} onClick={()=>handleClick(nota)}>\n     \n      {\n      \n<span className={`${estaSonando === nota.nombre && 'show'} `}>{nota.nombre}</span>\n      }\n     \n        {nota.tieneSostenido && <div className = \"negra\"></div>}\n      </div>\n    )\n  })}\n</div>\n</div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}